#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left=nullptr, *right=nullptr;
};

// Inorder traversal
void traverseInOrder(struct node *root) {
    if (root!=nullptr)
    {
        traverseInOrder(root->left);
        cout<<root->key<<" ";
        traverseInOrder(root->right);
    }
}

//get the minimum of a tree
int getMin(struct node *root)
{
    struct node* temp = new struct node;
    temp = root;
    while(temp->left==nullptr)
    {
        temp = temp->left;
    }
    return temp->key;
}

// Insert a node
struct node *insertNode(struct node *node, int key) {

    if (node!=nullptr)
    {
        if (node->key>=key)
        {
            node->left = insertNode(node->left,key);
        }
        else{
            node->right = insertNode(node->right,key);
        }
    }
    else{
        struct node* newNode;
        newNode = new struct node;
        node = newNode;
        node->key = key;
    }
    return node;
}

// Deleting a node
struct node *deleteNode(struct node *root, int key) {
    if (root!=nullptr)
    {
        if (root->key!=key)
        {
            if (root->key>key){
                root->left = deleteNode(root->left,key);
            }
            else
            {
                root->right = deleteNode(root->right,key);
            }
        }
        else{
            //deleting a node which has one child or no child
            if (root->left==nullptr)
            {
                return root->right;
            }
            else if (root->right==nullptr)
            {
                return root->left;
            }
            //deleting a node which has two child
            else{
                int min = getMin(root->right);
                struct node* minNode = deleteNode(root->right,min);
                root->key = min;
            }
        }
    }
    return root;
}

// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }

  traverseInOrder(root);
  return 0;
}
